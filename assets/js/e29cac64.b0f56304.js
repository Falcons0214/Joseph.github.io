"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[892],{237:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>h,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"RISC-V ISA/Cache","title":"Cache","description":"What is Cache ?","source":"@site/docs/RISC-V ISA/Cache.md","sourceDirName":"RISC-V ISA","slug":"/RISC-V ISA/Cache","permalink":"/docs/RISC-V ISA/Cache","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RISC-V ISA/Cache.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Log System","permalink":"/docs/Multi-Core Programming/Log System"},"next":{"title":"Simple_RV32I_CPU","permalink":"/docs/RISC-V ISA/Simple_RV32I_CPU"}}');var a=n(4848),c=n(8453);const t={},l=void 0,h={},r=[{value:"What is Cache ?",id:"what-is-cache-",level:2},{value:"Cache Mapping",id:"cache-mapping",level:2},{value:"direct-mapped",id:"direct-mapped",level:3},{value:"Tag",id:"tag",level:4},{value:"the valid bit",id:"the-valid-bit",level:4},{value:"What happens on a cache hit ?",id:"what-happens-on-a-cache-hit-",level:3},{value:"What happens on a cache miss ?",id:"what-happens-on-a-cache-miss-",level:3},{value:"Execise 1",id:"execise-1",level:3},{value:"Spatial locality",id:"spatial-locality",level:3},{value:"Block addresses",id:"block-addresses",level:3},{value:"Locating data in the cache",id:"locating-data-in-the-cache",level:3},{value:"Execise 2",id:"execise-2",level:3},{value:"Disadvantage of direct mapping",id:"disadvantage-of-direct-mapping",level:3},{value:"A fully associative cache",id:"a-fully-associative-cache",level:3},{value:"The price of full associativity",id:"the-price-of-full-associativity",level:4},{value:"Set associativity",id:"set-associativity",level:3},{value:"What is &quot;set&quot; ?",id:"what-is-set-",level:4},{value:"Locating a set associative block",id:"locating-a-set-associative-block",level:3},{value:"Example placement in set-associative caches",id:"example-placement-in-set-associative-caches",level:3},{value:"Reference",id:"reference",level:2}];function d(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"what-is-cache-",children:"What is Cache ?"}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsx)(i.p,{children:"A cache is a hardware or software component that stores data so that future requests for that data can be served faster."}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Cache \u5132\u5b58\u7684 data \u5f9e\u4f55\u800c\u4f86 \uff1f"}),"\n",(0,a.jsx)(i.li,{children:"The data stored in a cache might be the result of an earlier computation or a copy of data stored elsewhere (usually memory)."}),"\n"]})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/HyDZWK031e.jpg",alt:"cache_comic"})}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsx)(i.p,{children:"Cache \u5c31\u50cf\u662f\u4f60\u7684\u66f8\u684c\u4e00\u6a23\uff0c\u7528\u4f86\u653e\u4f60\u63a5\u89f8\u983b\u7387\u6700\u9ad8\u7684\u7269\u54c1\uff0c\u5b83\u7a7a\u9593\u6709\u9650\u4e0d\u80fd\u7121\u9650\u64f4\u5927\uff0c\u6240\u4ee5\u6bcf\u7576\u684c\u5b50\u5feb\u6eff\u6642\uff0c\u6211\u5011\u5c31\u5fc5\u9808\u9078\u51fa\u4e00\u4e9b\u8f03\u5c11\u4f7f\u7528\u7684\u7269\u54c1\u653e\u56de\u6ac3\u5b50\uff0c\u624d\u6703\u6709\u7a7a\u9593\u53bb\u653e\u6700\u8fd1\u4f7f\u7528\u983b\u7387\u8f03\u9ad8\u7684\u7269\u54c1\u3002"})}),"\n",(0,a.jsxs)(i.p,{children:["\u6839\u64da\u4e0a\u8ff0\uff0c\u6211\u5011\u9700\u8981\u5c07 ",(0,a.jsx)(i.strong,{children:"\u201c\u4f7f\u7528\u983b\u7387\u8f03\u4f4e\u7684\u7269\u54c1\u79fb\u51fa\u684c\u5b50\u201d"}),"\uff0c\u4e26 ",(0,a.jsx)(i.strong,{children:"\u201c\u79fb\u5165\u4f7f\u7528\u983b\u7387\u8f03\u9ad8\u7684\u7269\u54c1\u201d"}),"\uff0c\u9019\u5169\u9805\u64cd\u4f5c\u5c31\u884d\u751f\u51fa ",(0,a.jsx)(i.strong,{children:"Cache Mapping"}),"\u3002"]}),"\n",(0,a.jsx)(i.p,{children:"\u5982\u4f55\u7cbe\u6e96\u7684\u5c07\u672a\u4f86\u6703\u4f7f\u7528\u5230\u7684\u7269\u54c1\u5148\u653e\u5230\u684c\u5b50\u65c1\uff0c\u4e26\u6311\u9078\u51fa\u672a\u4f86\u4f7f\u7528\u983b\u7387\u6700\u4f4e\u7684\u7269\u54c1\u653e\u56de\u6ac3\u5b50\uff0c\u9019\u5c31\u662f Cache Mapping \u5728\u63a2\u8a0e\u7684\u554f\u984c\u3002"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Four important questions:"}),"\n","\u203c\ufe0f"]}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:["When we copy a block of data from main memory to the cache, ",(0,a.jsx)(i.strong,{children:"where exactly should we put it ?"})]}),"\n",(0,a.jsx)(i.li,{children:"How can we tell if a word is already in the cache, or if it has to be fetched from main memory first ?"}),"\n",(0,a.jsx)(i.li,{children:"Eventually, the small cache memory might fill up. To load a new block from main RAM, we\u2019d have to replace one of the existing blocks in the cache... which one?"}),"\n",(0,a.jsx)(i.li,{children:"How can write operations be handled by the memory system?"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"cache-mapping",children:"Cache Mapping"}),"\n",(0,a.jsx)(i.h3,{id:"direct-mapped",children:"direct-mapped"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/ByOU8tCnJl.png",alt:"image"})}),"\n",(0,a.jsxs)(i.p,{children:["Let Cache size be: X",(0,a.jsx)(i.br,{}),"\n","Memory Address be: Q"]}),"\n",(0,a.jsx)(i.p,{children:"The cache index that is used to store the corresponding memory unit is:"}),"\n",(0,a.jsx)(i.p,{children:"Q  %  X"}),"\n",(0,a.jsx)(i.p,{children:"or by least-significant bits"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/HJECPYC21l.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:"\u76ee\u524d\u70ba\u6b62\u6211\u5011\u5df2\u7d93\u5c07 memory block \u8207 cache line \u5efa\u7acb\u6620\u5c04\u95dc\u4fc2\uff0c\u63a5\u4e0b\u4f86\u5c31\u662f\u8981:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"\u5982\u4f55\u8a18\u9304\u9700\u8981\u88ab\u66f4\u65b0\u56de main memory \u7684 cache line ?"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"\u5982\u4f55\u8a18\u9304\u76ee\u524d cache line \u6240\u4ee3\u8868\u7684\u70ba\u54ea\u4e00\u500b memory block?"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"\u5982\u4f55\u5f97\u77e5 Cache line \u662f\u5426\u5728\u4f7f\u7528\u4e2d\uff08Full or Empty\uff09\uff1f"})}),"\n"]}),"\n",(0,a.jsx)(i.h4,{id:"tag",children:"Tag"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/ryr4tF0nJx.png",alt:"image"})}),"\n",(0,a.jsxs)(i.p,{children:["\u203c\ufe0f","\n\u5c07 Cache line index \u8207 Tag \u7d50\u5408\u53ef\u4ee5\u77e5\u9053\uff0c\u7576\u524d Cache line \u6240\u5c0d\u61c9\u7684 memory block \u4f4d\u5740\u3002"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/S1jRiK0n1g.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:"\u65e2\u7136\u8981\u80fd\u5920\u5b8c\u5168\u8868\u793a memory block \u4f4d\u5740\uff0cTag \u9700\u8981\u82b1\u8cbb\u7684 Bits \u5c31\u6703\u8207 Memory size & Cache size \u606f\u606f\u76f8\u95dc\u3002"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Memory Size: 2^n"}),"\n",(0,a.jsx)(i.li,{children:"Cache Size:  2^m"}),"\n",(0,a.jsx)(i.li,{children:"Bits in Tag: n - m"}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"\u77e5\u9053\u4e86 Cache line \u6240\u5c0d\u61c9\u7684 memory block \u5f8c\uff0c\u518d\u4f86\u5247\u662f\u78ba\u8a8d Cache Line \u662f\u5426\u6709\u88ab\u4f7f\u7528(Full or Empty)?"}),"\n",(0,a.jsx)(i.h4,{id:"the-valid-bit",children:"the valid bit"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/SJTvRFR3yg.png",alt:"image"})}),"\n",(0,a.jsxs)(i.p,{children:["\u203c\ufe0f","\n",(0,a.jsx)(i.strong,{children:"So the cache contains more than just copies of the data in memory;\nit also has bits to help us find data within the cache and verify its validity."})]}),"\n",(0,a.jsx)(i.h3,{id:"what-happens-on-a-cache-hit-",children:"What happens on a cache hit ?"}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsx)(i.p,{children:"When the CPU tries to read from memory, the address will be sent to a cache controller."})}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"32-bits Memory Address with 2^10-bytes Cache"}),"\n",(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/H1V7e5A3kl.png",alt:"image"})]}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsx)(i.li,{children:"\u78ba\u8a8d memory address \u7684\u524d 32 - 10 \u500b Bit \u8207 Tag \u662f\u5426\u76f8\u540c\uff0c\u82e5\u4e00\u6a23\u4ee3\u8868\u8a72 Cache Line \u8207\u4e4b\u76f8\u61c9\u3002"}),"\n",(0,a.jsx)(i.li,{children:"\u6aa2\u67e5 Valid Bits \u662f\u5426\u70ba 1\u3002"}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"what-happens-on-a-cache-miss-",children:"What happens on a cache miss ?"}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsx)(i.p,{children:"However, a much slower main memory access is needed on a cache miss."}),(0,a.jsx)(i.p,{children:"The simplest thing to do is to stall the pipeline until the data from main memory can be fetched (and also copied into the cache)."})]}),"\n",(0,a.jsx)(i.h3,{id:"execise-1",children:"Execise 1"}),"\n",(0,a.jsx)(i.p,{children:"For a byte-addressable machine with 16-bit addresses with a cache with the following characteristics:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"It is direct-mapped"}),"\n",(0,a.jsx)(i.li,{children:"Each block holds one byte"}),"\n",(0,a.jsx)(i.li,{children:"The cache index is the four least significant bits"}),"\n"]}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsx)(i.p,{children:"Question: How many blocks does the cache hold?\n:::spoiler Answer"}),(0,a.jsxs)(i.p,{children:["As we know ",(0,a.jsx)(i.strong,{children:"cache index is the four least significant bits"}),", so the answer is -> $2^4$"]})]}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsx)(i.p,{children:"Question: How many bits of storage are required to build the cache (e.g., for the\ndata array, tags, etc.)?"}),(0,a.jsx)(i.p,{children:":::spoiler Answer\nFor a Cache line we need 8-bit for stored our data, and we need 12-bit for tag value, and 1-bit for valid-bit, so totally we need 21-bit for a cache line."})]}),"\n",(0,a.jsx)(i.h3,{id:"spatial-locality",children:"Spatial locality"}),"\n",(0,a.jsx)(i.p,{children:"\u900f\u904e\u4e0b\u5217\u60c5\u5883\u89e3\u91cb\u4f55\u8b02 Spatial locality ?"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"Panel 1: CPU Requests Data"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"The CPU character (a cute computer chip) looks at a memory grid and requests data from address X."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:'Text: "Hmm, I need data from address X!"\nConcept: The CPU needs a piece of data stored in main memory.'}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"Panel 2: Data is Loaded into Cache"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"The CPU fetches address X from memory and places it into the cache (a smaller, faster memory)."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:'Text: "Got it! Let\u2019s put X into the cache."\nConcept: When data is loaded from memory, a whole block (including nearby addresses, e.g., X+1, X+2) is also loaded into the cache.'}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"Panel 3: CPU Requests Nearby Data"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"The CPU now requests X+1 and X+2."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:'Text: "Oh! I also need X+1 and X+2!"\nConcept: Since these addresses are close to X, they are already in the cache.'}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"Panel 4: Cache Hit! Fast Access"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"The CPU finds the data in the cache, avoiding slow memory access."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:'Text: "Thanks to spatial locality, I already have those in cache! Fast and efficient!"\nConcept: This is a cache hit, meaning the CPU doesn\'t have to go to main memory again, making data access much faster.'}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"block-addresses",children:"Block addresses"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/rkEhj5Rh1e.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/BkdSpq0nyl.png",alt:"image"})}),"\n",(0,a.jsx)(i.h3,{id:"locating-data-in-the-cache",children:"Locating data in the cache"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/HykVkiAnJl.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/ryOr1i0h1e.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/Hy-DJsRhkg.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/HJ26JjAn1g.png",alt:"image"})}),"\n",(0,a.jsx)(i.h3,{id:"execise-2",children:"Execise 2"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/Skmvli03Jg.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:":::spoiler Answer"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["1010 -> ",(0,a.jsx)(i.code,{children:"0xDE"})]}),"\n",(0,a.jsx)(i.li,{children:"1110 -> Cache miss (valid bit is 0)"}),"\n",(0,a.jsxs)(i.li,{children:["0001 -> ",(0,a.jsx)(i.code,{children:"0xFE"})]}),"\n",(0,a.jsx)(i.li,{children:"1101 -> Cache miss (tag not equal)\n:::"}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"disadvantage-of-direct-mapping",children:"Disadvantage of direct mapping"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/S1eEziAnkx.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:"\u203c\ufe0f"}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsx)(i.p,{children:"\u5982\u679c\u5c0d \u5c0d\u61c9\u5230\u76f8\u540c Cache Line \u7684 memory block \u8f2a\u6d41\u9032\u884c\u5b58\u53d6\uff0c\u9019\u6642\u6bcf\u4e00\u6b21\u7684\u5b58\u53d6\u90fd\u6703 Cache Miss\uff0c\u5176\u539f\u56e0\u51fa\u5728 Directly Mapping \u7684\u8a2d\u8a08\u4e0a\uff0c\u56e0\u70ba\u4e0d\u540c memory block \u53ea\u80fd\u8f09\u5165\u5230\u56fa\u5b9a\u7684 Cache Line \u4e0a\u3002"}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"a-fully-associative-cache",children:"A fully associative cache"}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsx)(i.p,{children:"A fully associative cache permits data to be stored in any cache block, instead of forcing each memory address into one particular block."})}),"\n",(0,a.jsx)(i.h4,{id:"the-price-of-full-associativity",children:"The price of full associativity"}),"\n",(0,a.jsx)(i.p,{children:"\u203c\ufe0f"}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"Because there is no index field in the address anymore, the entire address must be used as the tag, increasing the total cache size."})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"Data could be anywhere in the cache, so we must check the tag of every cache block. That\u2019s a lot of comparators!"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/ByPjwaC2Je.png",alt:"image"})}),"\n",(0,a.jsx)(i.h3,{id:"set-associativity",children:"Set associativity"}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsx)(i.p,{children:"Set associativity \u662f fully associativity \u7684\u6298\u8877\uff0c\u7562\u7adf fully associativity \u6240\u9700\u7684\u82b1\u8cbb\u592a\u9ad8\u3002"}),(0,a.jsx)(i.p,{children:"fully associativity \u7684\u521d\u8877\u662f\u5e0c\u671b memory block \u6620\u5c04\u5230\u7684 Cache Line \u80fd\u5920\u4e0d\u53d7\u9650\u5236\uff0c\u4f46\u4ee3\u50f9\u5c31\u662f\u9700\u8981\u975e\u5e38\u5927\u91cf\u7684\u786c\u9ad4\u3002"}),(0,a.jsx)(i.p,{children:"Set associativity \u5247\u662f\u8b93 memory block \u80fd\u6620\u5c04\u5230\u4e00\u500b set \u7684 Cache\u3002"})]}),"\n",(0,a.jsx)(i.h4,{id:"what-is-set-",children:'What is "set" ?'}),"\n",(0,a.jsx)(i.p,{children:"\u203c\ufe0f"}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:"The cache is divided into groups of blocks, called sets."})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.strong,{children:(0,a.jsx)("font",{color:"#ff0000",children:"Each memory address maps to exactly one set in the cache, but data may be placed in any block within that set."})})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/Sy_ndpAnJx.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/BysbkAA3yl.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/Hy48g003kg.png",alt:"image"})}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsxs)(i.strong,{children:["n-way associativity \u958b\u982d\u7684 ",(0,a.jsx)(i.code,{children:"n"})," \u8868\u793a\u7d44\u6210\u4e00\u500b set \u7684 block \u6578\u91cf\u3002"]}),"\n\u6240\u8b02\u7684 n-way \u5247\u662f memory block \u80fd\u5920\u6620\u5c04\u5230 Cache Line \u7684\u6578\u91cf\u3002"]}),"\n",(0,a.jsx)(i.h3,{id:"locating-a-set-associative-block",children:"Locating a set associative block"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/HkaRcTRnJe.png",alt:"image"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/B1kSvRR2kg.png",alt:"image"})}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsx)(i.p,{children:"$2n$ = Cache line size"}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Block Offset = $Memory Address \\ mod \\ 2n$"}),"\n",(0,a.jsx)(i.li,{children:"Block Address = $Memory Address \\  / \\ 2n$"}),"\n",(0,a.jsx)(i.li,{children:"Set Index = $Block Address \\ mod \\ 2s$"}),"\n"]})]}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Set Index: Cache Line \u7684\u7de8\u865f\u3002"}),"\n",(0,a.jsx)(i.li,{children:"Block Address: \u7b2c\u5e7e\u500b Memory Block"}),"\n",(0,a.jsx)(i.li,{children:"Block Offset: memory block \u6240\u5728\u7684 Set \u4e2d\u7684\u4f4d\u5740(\u4e0b\u5716\u7684 way0 or way1)\u3002"}),"\n"]})}),"\n",(0,a.jsx)(i.h3,{id:"example-placement-in-set-associative-caches",children:"Example placement in set-associative caches"}),"\n",(0,a.jsx)(i.p,{children:"2-way set associative cache implementation"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:"https://hackmd.io/_uploads/SkWPVAR3yx.png",alt:"image"})}),"\n",(0,a.jsx)(i.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsxs)(i.p,{children:["[0]\u3002",(0,a.jsx)(i.a,{href:"https://courses.cs.washington.edu/courses/cse378/09wi/lectures/lec15.pdf",children:"How do caches work?"})]}),"\n",(0,a.jsxs)(i.p,{children:["[1]\u3002",(0,a.jsx)(i.a,{href:"https://alg.manifoldapp.org/read/computer-organization/section/3d477606-2c6e-4b2f-b6dc-6c5eb9afb56a",children:"Computer Organization"})]})]})}function o(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var s=n(6540);const a={},c=s.createContext(a);function t(e){const i=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(c.Provider,{value:i},e.children)}}}]);