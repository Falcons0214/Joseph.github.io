"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[80],{300:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Column Base DBMS/System Design","title":"System Design","description":"System Structure","source":"@site/docs/Column Base DBMS/System Design.md","sourceDirName":"Column Base DBMS","slug":"/Column Base DBMS/System Design","permalink":"/docs/Column Base DBMS/System Design","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Column Base DBMS/System Design.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"B-link-tree","permalink":"/docs/Column Base DBMS/B-link-tree"},"next":{"title":"Initialization Macro","permalink":"/docs/FreeRTOS/Initialization Macro"}}');var s=r(4848),t=r(8453);const l={},o=void 0,d={},a=[{value:"System Structure",id:"system-structure",level:2},{value:"DB layout",id:"db-layout",level:3},{value:"Disk Layout",id:"disk-layout",level:3},{value:"Client &amp; Server",id:"client--server",level:3},{value:"Thread Pool",id:"thread-pool",level:3},{value:"Buffer Pool Layout",id:"buffer-pool-layout",level:3},{value:"Access Layer",id:"access-layer",level:3},{value:"Page ID Manager",id:"page-id-manager",level:3},{value:"Page Scheduler",id:"page-scheduler",level:3},{value:"Table Structure",id:"table-structure",level:2},{value:"General Table",id:"general-table",level:3},{value:"Indexing (Implement by B-Link-Tree)",id:"indexing-implement-by-b-link-tree",level:3},{value:"B_link_tree indexing",id:"b_link_tree-indexing",level:2},{value:"Lock Coupling (with no right link B-tree)",id:"lock-coupling-with-no-right-link-b-tree",level:3},{value:"Lock Subtree (with no right link B-tree)",id:"lock-subtree-with-no-right-link-b-tree",level:3},{value:"Why B_link_tree can doing insert &amp; search at same time",id:"why-b_link_tree-can-doing-insert--search-at-same-time",level:3},{value:"B_link_tree &quot;Remove entry&quot;",id:"b_link_tree-remove-entry",level:2},{value:"Difference between &quot;Lock root&quot; &amp; &quot;Lock subtree&quot;",id:"difference-between-lock-root--lock-subtree",level:3},{value:"These conditions may lead to changes in the tree structure",id:"these-conditions-may-lead-to-changes-in-the-tree-structure",level:3},{value:"Remove Max entry",id:"remove-max-entry",level:3},{value:"Borrow",id:"borrow",level:3},{value:"Case 1",id:"case-1",level:4},{value:"Case 2",id:"case-2",level:4},{value:"If the key stay in high level",id:"if-the-key-stay-in-high-level",level:4},{value:"Merge",id:"merge",level:3},{value:"Case 1 (Merge nodes are stay in same parent)",id:"case-1-merge-nodes-are-stay-in-same-parent",level:4},{value:"Case 2 (Merge nodes from different sub tree)",id:"case-2-merge-nodes-from-different-sub-tree",level:4},{value:"The key stay in high level",id:"the-key-stay-in-high-level",level:4},{value:"Current provide commands",id:"current-provide-commands",level:2}];function c(e){const n={a:"a",admonition:"admonition",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"system-structure",children:"System Structure"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/Falcons0214/dsm_db",children:(0,s.jsx)(n.strong,{children:"Code Link"})})}),"\n",(0,s.jsx)(n.h3,{id:"db-layout",children:"DB layout"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/BkGhl7fo2.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"disk-layout",children:"Disk Layout"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/HkLRQpdLn.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"client--server",children:"Client & Server"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/ryOpiEqKh.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"thread-pool",children:"Thread Pool"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/r14_7yAr3.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"buffer-pool-layout",children:"Buffer Pool Layout"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/S1ABWxAB3.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"access-layer",children:"Access Layer"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How page loading in pool."})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/rkKefZDOh.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"page-id-manager",children:"Page ID Manager"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/BJlManT-U2.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"page-scheduler",children:"Page Scheduler"}),"\n",(0,s.jsx)(n.h2,{id:"table-structure",children:"Table Structure"}),"\n",(0,s.jsx)(n.h3,{id:"general-table",children:"General Table"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/H10SYQfjn.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"indexing-implement-by-b-link-tree",children:"Indexing (Implement by B-Link-Tree)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/H1RLEEMi3.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"b_link_tree-indexing",children:"B_link_tree indexing"}),"\n",(0,s.jsx)(n.h3,{id:"lock-coupling-with-no-right-link-b-tree",children:"Lock Coupling (with no right link B-tree)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u8b80\u5beb\u9694\u96e2"})}),"\n",(0,s.jsxs)(n.p,{children:["\u9019\u908a\u6307\u7684\u9694\u96e2\u4e26\u4e0d\u662f\u6307\uff0c\u6bcf\u7576",(0,s.jsx)(n.strong,{children:"\u63d2\u5165"}),"\u6216",(0,s.jsx)(n.strong,{children:"\u641c\u5c0b"}),"\u767c\u751f\u6642\u5c31\u5c07\u6574\u9846\u6a39\u7d66\u9396\u4f4f\uff0c\u800c\u662f\u5c0d ",(0,s.jsx)(n.strong,{children:"\u5373\u5c07\u9032\u884c\u5206\u88c2\u7684 Page \u4ee5\u53ca\u8a72 Page \u7684\u89aa\u4ee3\u7bc0\u9ede"})," \u4e0a\u9396\u3002"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/r1iRxbq3n.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"lock-subtree-with-no-right-link-b-tree",children:"Lock Subtree (with no right link B-tree)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u5beb\u5beb\u9694\u96e2"})}),"\n",(0,s.jsx)(n.p,{children:"\u9019\u88e1\u7684\u9694\u96e2\u6307\u7684\u662f\u5c07\u5b50\u6a39(\u540c\u4e0a)\u7d66\u4e0a\u9396\uff0c\u539f\u56e0\u5728\u65bc\u7576\u5206\u88c2\u767c\u751f\u6642\u5982\u679c\u7236\u7bc0\u9ede\u56e0\u70ba\u5176\u4ed6\u5b50\u6a39\u7684\u63d2\u5165\u9020\u6210\u5206\u88c2\uff0c\u9019\u6642\u5982\u679c\u8981\u63d2\u5165\u7684\u7bc0\u9ede\u5927\u65bc\u5206\u88c2\u5f8c\u7236\u7bc0\u9ede\u7684\u4e0a\u9650\uff0c\u90a3\u9019\u6642\u5c31\u6703\u767c\u751f\u932f\u8aa4\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/B1NhbG92n.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"why-b_link_tree-can-doing-insert--search-at-same-time",children:"Why B_link_tree can doing insert & search at same time"}),"\n",(0,s.jsxs)(n.p,{children:["The key point is ",(0,s.jsx)(n.strong,{children:'"right link"'}),", when search operation it can't find record in original node, it can use ",(0,s.jsx)(n.strong,{children:"right link"})," to next node."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/H1NfmMY23.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"b_link_tree-remove-entry",children:'B_link_tree "Remove entry"'}),"\n",(0,s.jsx)(n.h3,{id:"difference-between-lock-root--lock-subtree",children:'Difference between "Lock root" & "Lock subtree"'}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.h3,{id:"these-conditions-may-lead-to-changes-in-the-tree-structure",children:"These conditions may lead to changes in the tree structure"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["\u203c\ufe0f",' The "change" it always occur from leaf then End in the pivot.']})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"A:"})," ",(0,s.jsx)(n.strong,{children:'"Remove Max entry"'})," from leaf node."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"B:"})," Leaf node need ",(0,s.jsx)(n.strong,{children:'"merge"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C:"})," ",(0,s.jsx)(n.strong,{children:'"Borrow"'})," an entry from sibling node. (The sibling can be left or right node, but in here I always borrow frome left, unless the node it is leftmost)"]}),"\n"]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Combination of condition:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A"}),"\n",(0,s.jsx)(n.li,{children:"B"}),"\n",(0,s.jsx)(n.li,{children:"C"}),"\n",(0,s.jsx)(n.li,{children:'A & C (Only occur when "C" is not leftmost node)'}),"\n",(0,s.jsx)(n.li,{children:'A & B (Only occur when "B" is not leftmost node)'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We will describe each condition detailly in below topic."}),"\n",(0,s.jsx)(n.h3,{id:"remove-max-entry",children:"Remove Max entry"}),"\n",(0,s.jsxs)(n.p,{children:["All ",(0,s.jsx)(n.strong,{children:'internal nodes key are referencing from "Max key" in their corresponding leaf nodes'}),", if we remove a key that is ",(0,s.jsx)(n.strong,{children:"max key"})," of leaf node, it can cause inconsistency between internal node data and leaf node data."]}),"\n",(0,s.jsxs)(n.p,{children:["Therefore, we must find a ",(0,s.jsx)(n.strong,{children:"replacement value"})," to substitute for the removed key."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/S1WkO0bJT.png",alt:""})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["If luckily we can find ",(0,s.jsx)(n.strong,{children:"key"})," from ",(0,s.jsx)(n.strong,{children:"parent node"}),",  the operation will be completed at this point."]}),(0,s.jsx)(n.p,{children:"If not we need update the upper bound in pivot node, until we find the key."})]}),"\n",(0,s.jsx)(n.h3,{id:"borrow",children:"Borrow"}),"\n",(0,s.jsx)(n.p,{children:"As mentioned above, the borrow operation involves borrowing an entry from the left sibling node."}),"\n",(0,s.jsxs)(n.p,{children:["For left sibling node, we can ",(0,s.jsx)(n.strong,{children:"treat this operaiton as remove max."})]}),"\n",(0,s.jsx)(n.p,{children:'For "borrow" we need consider two situations:'}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["\u203c\ufe0f"," We will use ",(0,s.jsx)(n.strong,{children:'"cur"'})," for represent the node we remove entry from it."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'Here we assume "cur" will not be leftmost node'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Case1:"})," If we remove max entry from cur, and it borrow an entry from left sibiling.\n",(0,s.jsx)(n.strong,{children:"Case2:"})," Only borrow an entry from left sibling."]})}),"\n",(0,s.jsx)(n.h4,{id:"case-1",children:"Case 1"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/rkcPx6eyp.png",alt:""})}),"\n",(0,s.jsx)(n.h4,{id:"case-2",children:"Case 2"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/rJlLUB3x1T.png",alt:""})}),"\n",(0,s.jsx)(n.h4,{id:"if-the-key-stay-in-high-level",children:"If the key stay in high level"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/HyKDosWJa.png",alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, we can treat borrow as an other ",(0,s.jsx)(n.strong,{children:"remove max"})," operation."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Above we assume the ",(0,s.jsx)(n.strong,{children:"cur"})," will not be leftmost node, and below we will discuss when ",(0,s.jsx)(n.strong,{children:"cur"})," is leftmost node."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"cur" is leftmost node'})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"If cur is leftmost node we always borrow from right sibling."}),(0,s.jsxs)(n.p,{children:["For this situation, ",(0,s.jsx)(n.strong,{children:"remove max condition occur we can skip it"}),", because we will take the smallest value from right sibling, for right sibling it can treat as a general rmove then finish it, and ",(0,s.jsx)(n.strong,{children:"for cur any entry from right it always be the largest value"}),", so we will need update upper bound and it corresponding key in pivot node."]}),(0,s.jsxs)(n.p,{children:["Another important property is ",(0,s.jsx)(n.strong,{children:'"cur" & "right node"'})," they can sure stay in same parent node, unless the pivot node branch factor is two."]})]}),"\n",(0,s.jsx)(n.h3,{id:"merge",children:"Merge"}),"\n",(0,s.jsx)(n.p,{children:"Merge Rule:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If cur is leftmost node: ",(0,s.jsx)(n.strong,{children:"Merge cur to right node"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Not: ",(0,s.jsx)(n.strong,{children:"Merge cur to left node"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["\u203c\ufe0f"," We start from Cur is not leftmost node"]})}),"\n",(0,s.jsxs)(n.p,{children:["In this condition ",(0,s.jsx)(n.strong,{children:"Merge"})," will occur with ",(0,s.jsx)(n.strong,{children:"Remove max"})," at same time."]}),"\n",(0,s.jsx)(n.h4,{id:"case-1-merge-nodes-are-stay-in-same-parent",children:"Case 1 (Merge nodes are stay in same parent)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/ByEHfjM1p.png",alt:""})}),"\n",(0,s.jsx)(n.h4,{id:"case-2-merge-nodes-from-different-sub-tree",children:"Case 2 (Merge nodes from different sub tree)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/ryYNvtE1a.png",alt:""})}),"\n",(0,s.jsx)(n.h4,{id:"the-key-stay-in-high-level",children:"The key stay in high level"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://hackmd.io/_uploads/B1f1cwrka.png",alt:""})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["\u203c\ufe0f"," Below content will discuss cur is leftmost node"]})}),"\n",(0,s.jsxs)(n.p,{children:["As ",(0,s.jsx)(n.strong,{children:"borrow"})," we can ignore ",(0,s.jsx)(n.strong,{children:"Remove max"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"current-provide-commands",children:"Current provide commands"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For general table:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"create table"}),"\n",(0,s.jsx)(n.li,{children:"delete table"}),"\n",(0,s.jsx)(n.li,{children:"insert an entry"}),"\n",(0,s.jsx)(n.li,{children:"remove an entry"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For index:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"create table"}),"\n",(0,s.jsx)(n.li,{children:"delete table"}),"\n",(0,s.jsx)(n.li,{children:"insert an entry"}),"\n",(0,s.jsx)(n.li,{children:"remove an entry"}),"\n",(0,s.jsx)(n.li,{children:"search an entry"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);