"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[884],{372:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Linux Kernel/Process","title":"Process & Program","description":"Process","source":"@site/docs/Linux Kernel/Process.md","sourceDirName":"Linux Kernel","slug":"/Linux Kernel/Process","permalink":"/docs/Linux Kernel/Process","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Linux Kernel/Process.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Multi-core Message Buffer","permalink":"/docs/FreeRTOS/Multi-core Message Buffer"},"next":{"title":"Log System","permalink":"/docs/Multi-Core Programming/Log System"}}');var i=s(4848),c=s(8453);const t={},l="Process & Program",o={},d=[{value:"Process",id:"process",level:2},{value:"\u69cb\u6210 Process \u7684\u5143\u7d20\u5011",id:"\u69cb\u6210-process-\u7684\u5143\u7d20\u5011",level:3},{value:"Differ between new process &amp; parent",id:"differ-between-new-process--parent",level:3},{value:"Thread",id:"thread",level:2},{value:"Differ between thread &amp; process",id:"differ-between-thread--process",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"process--program",children:"Process & Program"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Process"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Processes are often called tasks or threads in the Linux source code."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea Understanding The Linux Kernel"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'The process is the major OS abstraction of a running program. At any point in time, the process can be described by its state: "the contents of memory in its address space", "the contents of CPU registers (including the program counter and stack pointer, among others)", and "information about I/O (such as open files which can be read or written)".'})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea The Abstraction: The Process"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Program"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"program itself is a lifeless thing: it just sits there on the disk"}),", a bunch of instructions (and maybe some static data), waiting to spring into action."]}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea The Abstraction: The Process"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"\u8207-process-\u76f8\u95dc\u7684\u8b70\u984c",children:"\u8207 Process \u76f8\u95dc\u7684\u8b70\u984c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"context switch"}),"\n",(0,i.jsx)(n.li,{children:"time-sharing & space-sharing"}),"\n",(0,i.jsx)(n.li,{children:"scheduling policy"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"processes-lightweight-processes-and-threads",children:"Processes, Lightweight Processes, and Threads"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Process"})," \u70ba\u67d0\u4e00 ",(0,i.jsx)(n.strong,{children:"Program\uff08\u53ef\u57f7\u884c\u6a94: elf\u3001exe\uff09"})," \u8f09\u5165\u81f3\u8a18\u61b6\u9ad4\u4e2d\u57f7\u884c\u7684\u7a31\u547c\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u6839\u64da\u4e0d\u540c\u7cfb\u7d71(OS)\uff0cProcess\u6709\u6703\u6709\u4e0d\u540c\u7684\u5be6\u4f5c\u8207\u5b9a\u7fa9\uff0c\u9019\u908a\u5c07\u4ee5Linux process\u70ba\u7bc4\u4f8b\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"process",children:"Process"}),"\n",(0,i.jsxs)(n.p,{children:["\u5728 Linux \u4e2d Process \u53ef\u4ee5\u60f3\u50cf\u6210",(0,i.jsx)(n.strong,{children:"\u4e00\u7a2e\u8907\u96dc\u7684\u8cc7\u6599\u7d50\u69cb\u7d50\u5408\u9ad4"}),"\uff0c\u7528\u4f86\u8a18\u9304\u8207\u63cf\u8ff0 Process \u7684\u72c0\u614b\uff0c"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L743",children:"task_structure"})," \u70ba Linux \u4e2d\u7528\u4f86\u8868\u793a Process\u7684\u7d50\u69cb\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u5b83\u4e5f\u6709\u89aa\u5c6c\u95dc\u4fc2\uff0c\u6bcf\u4e00\u500b Process \u900f\u904e\u4e00\u4f4d\u5148\u8f29\u7bc0\u9ede\u8a95\u751f\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6709\u591a\u500b\u540c\u8f29\u7bc0\u9ede\u3002"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["When a process is created, it is ",(0,i.jsx)(n.strong,{children:"almost identical"})," to its parent. ",(0,i.jsx)(n.strong,{children:"It receives a (logical) copy of the parent\u2019s address space"})," and ",(0,i.jsx)(n.strong,{children:"executes the same code as the parent"}),", beginning at the next instruction following the process creation system call."]}),"\n",(0,i.jsxs)(n.p,{children:["Although the parent and child may share the pages containing the program code (text), ",(0,i.jsx)(n.strong,{children:"they have separate copies of the data (stack and heap)"}),", so that changes by the child to a memory location are invisible to the parent (and vice versa)."]}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea Understanding The Linux Kernel"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u69cb\u6210-process-\u7684\u5143\u7d20\u5011",children:"\u69cb\u6210 Process \u7684\u5143\u7d20\u5011"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Memory"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Thus the memory that the process can address (called its address space) is part of the process."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea The Abstraction: The Process"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Register"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Also part of the process\u2019s machine state are registers; many instructions explicitly read or update registers and thus clearly they are important to the execution of the process."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea The Abstraction: The Process"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"I/O Device"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finally, programs often access persistent storage devices too. Such I/O information might include a list of the files the process currently has open."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea The Abstraction: The Process"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"differ-between-new-process--parent",children:"Differ between new process & parent"}),"\n",(0,i.jsxs)(n.p,{children:["\u5728\u66f4\u6539\u8cc7\u6599\u524d\uff0c\u9664\u4e86 ",(0,i.jsx)(n.strong,{children:"PID (process ID)"})," \u3001 ",(0,i.jsx)(n.strong,{children:"PPID (parent process ID)"})," \u7b49\u4e00\u4e9b\u7528\u4f86\u5206\u8fa8 process \u7684 unique ID \u9700\u8981\u4e0d\u540c\u4e4b\u5916\u5176\u4ed6\u8207 parent process \u7121\u7570\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5728\u8cc7\u6599\u66f4\u6539\u5f8c\uff08\u6839\u64da\u63a1\u7528\u7684\u5be6\u4f5c\u6280\u8853\u6703\u6709\u4e0d\u540c\u60c5\u666f\uff09\uff0c\u9019\u908a\u4ee5 ",(0,i.jsx)(n.strong,{children:"COW"})," \u70ba\u7bc4\u4f8b\u3002new process \u6703\u7e7c\u627f\u7236\u89aa\u7684\u8cc7\u6599\uff0c\u5982 ",(0,i.jsx)(n.strong,{children:"open file table"})," \u6296\uff0c\u4e26\u5728\u9019\u4e4b\u4e0a\u52a0\u4e0a\u81ea\u8eab\u6240\u505a\u7684\u4fee\u6539\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"thread",children:"Thread"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"The Linux kernel does not provide any special scheduling semantics or data structures to represent threads. Instead, a thread is merely a process that shares certain resources with other processes."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea Understanding The Linux Kernel"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A thread, defined as a single flow of execution, is linked with a stack\nand a set of CPU registers, with the stack pointer and program counter being the\nmost significant."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea lkmpg"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u5728Linux Kernel\u4e2d\u6700\u57fa\u672c\u7684\u57f7\u884c\u55ae\u4f4d\u5c31\u662fthread (lightweight process)\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"differ-between-thread--process",children:"Differ between thread & process"}),"\n",(0,i.jsxs)(n.p,{children:["\u9019\u88e1\u6703\u900f\u904e",(0,i.jsx)(n.code,{children:"clone()"}),"\u8a66\u8457\u53bb\u5206\u6790\u5169\u8005\u4e4b\u9593\u7684\u5dee\u7570\uff0c\u56e0\u70ba\u5728 Linux kernel \u4e2d\uff0cthread \u8207 process \u5169\u8005\u90fd\u662f\u900f\u904e ",(0,i.jsx)(n.code,{children:"task_structure"})," \u9019\u4e00\u7d50\u69cb\u4f86\u8868\u793a\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u9019\u908a\u4ee5 POSIX",(0,i.jsx)(n.code,{children:"pthread_create()"})," \u4f5c\u70ba\u5efa\u7acbthread\u7684\u7bc4\u4f8b\uff0c\u800c process \u5247\u662f\u900f\u904e ",(0,i.jsx)(n.code,{children:"fork()"}),"\u3002"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"pthread_create calling flow:"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pthread_create()"})," -> ",(0,i.jsx)(n.code,{children:"create_thread()"})," -> ",(0,i.jsx)(n.code,{children:"kernel_clone()"})]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"fork calling flow:"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fork()"})," -> ",(0,i.jsx)(n.code,{children:"sys_fork()"})," -> ",(0,i.jsx)(n.code,{children:"kernel_clone()"})]})}),"\n",(0,i.jsxs)(n.p,{children:["\u203c\ufe0f"," ",(0,i.jsxs)(n.strong,{children:["\u5c0d\u65bc ",(0,i.jsx)(n.code,{children:"clone"})," \u800c\u6709\uff0c\u5169\u8005\u7684\u5dee\u5225\u5728\u7528\u4f86\u5efa\u7acb\u7684\u53c3\u6578\u4e0d\u540c"]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u7bc0\u9304\u81ea\uff1aLinux Kernel"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"SYSCALL_DEFINE0(fork)\n{\n#ifdef CONFIG_MMU\n\tstruct kernel_clone_args args = {\n\t\t.exit_signal = SIGCHLD,\n\t};\n\n\treturn kernel_clone(&args);\n#else\n\t/* can not support in nommu mode */\n\treturn -EINVAL;\n#endif\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["\u7bc0\u9304\u81ea\uff1aPOSIX ",(0,i.jsx)(n.code,{children:"pthread_create()"})]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"  const int clone_flags = (CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SYSVSEM\n\t\t\t   | CLONE_SIGHAND | CLONE_THREAD\n\t\t\t   | CLONE_SETTLS | CLONE_PARENT_SETTID\n\t\t\t   | CLONE_CHILD_CLEARTID\n\t\t\t   | 0);\n\n  TLS_DEFINE_INIT_TP (tp, pd);\n\n  struct clone_args args =\n    {\n      .flags = clone_flags,\n      .pidfd = (uintptr_t) &pd->tid,\n      .parent_tid = (uintptr_t) &pd->tid,\n      .child_tid = (uintptr_t) &pd->tid,\n      .stack = (uintptr_t) stackaddr,\n      .stack_size = stacksize,\n      .tls = (uintptr_t) tp,\n    };\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u9019\u88e1\u4f86\u505a\u500b\u5be6\u9a57\uff0c\u53bb\u900f\u904e\u5728 ",(0,i.jsx)(n.strong,{children:"/kernel/fork.c"})," \u7684 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"kernel_clone()"})})," \u4e2d\u589e\u52a0\u4e00\u6bb5\u7a0b\u5f0f\u78bc\uff0c\u53bb\u79c0\u51fa ",(0,i.jsx)(n.code,{children:"fork()"})," \u8207 ",(0,i.jsx)(n.code,{children:"pthread_create()"})," \u5728 clone \u6642\u6240\u4f7f\u7528\u7684 flags \u7684\u5dee\u5225\uff0c\u518d\u53bb\u770b\u9019\u4e9b flags \u7684\u5b9a\u7fa9\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u5be6\u9a57\u74b0\u5883\u70ba Linux kernel 6.8.1"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u65b0\u589e\u7684\u7a0b\u5f0f\u78bc :"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#define IDN "<CLONE_FLAGS>"\nstatic void __show_flag(u64 flags) {\n\tunsigned long mask = 1 << 9, limit = (unsigned long)1 << 32;\n\t\n\tfor (; mask <= limit; mask <<= 1) {\n\t\tif (flags & mask)\n\t\t\tpr_info("%s 0x%lx is enable\\n", IDN, mask);\n\t}\n\treturn;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"fork()"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-=",children:"[  106.814500] <CLONE_FLAGS> 0x200000 is enable\n[  106.815575] <CLONE_FLAGS> 0x1000000 is enable\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"pthread_create()"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-=",children:"[   50.175439] <CLONE_FLAGS> 0x100 is enable\n[   50.176710] <CLONE_FLAGS> 0x200 is enable\n[   50.177968] <CLONE_FLAGS> 0x400 is enable\n[   50.179192] <CLONE_FLAGS> 0x800 is enable\n[   50.180385] <CLONE_FLAGS> 0x10000 is enable\n[   50.181669] <CLONE_FLAGS> 0x40000 is enable\n[   50.182944] <CLONE_FLAGS> 0x80000 is enable\n[   50.184161] <CLONE_FLAGS> 0x100000 is enable\n[   50.185443] <CLONE_FLAGS> 0x200000 is enable\nParent here !\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u5728 ",(0,i.jsx)(n.a,{href:"https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/sched.h#L10",children:(0,i.jsx)(n.strong,{children:"/include/uapi/linux/sched.h"})})," \u4e2d\u5b9a\u7fa9\u4e86\u6bcf\u4e00\u9805flags\uff0c\u4e5f\u53ef\u4ee5\u53c3\u8003 ",(0,i.jsx)(n.a,{href:"https://www.man7.org/linux/man-pages/man2/clone.2.html",children:"clone(2) \u2014 Linux manual page"})]}),"\n",(0,i.jsxs)(n.p,{children:["\u89c0\u5bdf\u4e0a\u8ff0\u7d50\u679c\uff0c",(0,i.jsx)(n.code,{children:"pthread_create()"})," \u6bd4\u8d77 ",(0,i.jsx)(n.code,{children:"fork()"})," \u555f\u7528\u4e86\u66f4\u591a\u7684 flags:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-=",children:"[   50.175439] <CLONE_FLAGS> 0x100 is enable    // CLONE_VM\n[   50.176710] <CLONE_FLAGS> 0x200 is enable    // CLONE_FS\n[   50.177968] <CLONE_FLAGS> 0x400 is enable    // CLONE_FILES\n[   50.179192] <CLONE_FLAGS> 0x800 is enable    // CLONE_SIGHAND\n[   50.180385] <CLONE_FLAGS> 0x10000 is enable  // CLONE_THREAD\n[   50.181669] <CLONE_FLAGS> 0x40000 is enable  // CLONE_SYSVSEM\n[   50.182944] <CLONE_FLAGS> 0x80000 is enable  // CLONE_SETTLS\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u8457\u4f86\u4e00\u770b\u4e00\u4e0b\u9019\u4e9b Flags \u7684\u542b\u610f\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLONE_VM"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"The calling process and the child process run in the same memory space."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea\uff1aLinux manual page"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["\u5171\u4eab\u540c\u4e00\u500b ",(0,i.jsx)(n.code,{children:"mm_struct"})," \u7269\u4ef6"]})}),"\n",(0,i.jsx)(n.p,{children:"\u8a72 flag \u80fd\u8b93\u4e0d\u540c\u201c\u64cd\u4f5c\u6d41\u201d\u5728\u76f8\u540c\u4f4d\u5740\u7a7a\u9593\u4e0b\u57f7\u884c\uff0c\u9019\u4e5f\u4ee3\u8868\u4e86 thread \u8207 process \u4e4b\u9593\u7684\u5176\u4e2d\u4e00\u7a2e\u95dc\u4fc2\uff0cthread \u70ba process \u4e4b\u4e0b\u7684\u4e00\u500b\u5de5\u4f5c\u6d41\u7a0b\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLONE_FS"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"If CLONE_FS is set, the caller and the child process share the same filesystem information. This includes the root of the filesystem, the current working directory, and the umask."})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLONE_FILES"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"If CLONE_FILES is set, the calling process and the child process share the same file descriptor table."})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLONE_SIGHAND"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"If CLONE_SIGHAND is set, the calling process and the child process share the same table of signal handlers."})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLONE_THREAD"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Inserts the child into the same thread group of the parent, and forces the child to share the signal descriptor of the parent."})}),"\n",(0,i.jsx)(n.p,{children:"\u6458\u9304\u81ea Understanding The Linux Kernel"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4e0a\u8ff0\u6709\u63d0\u5230 \u82e5\u8a72flag\u6709\u88ab\u8a2d\u7f6e\uff0c\u5247\u6703\u5c07\u65b0\u5efa\u7acb\u7684 task \u52a0\u5165 parent \u7684 thread group\u3002\u800c\u4e14\u6240\u6709\u5728 parent \u7684 thread \u6703\u5171\u540c\u88ab signal\u6240\u5f71\u97ff\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u5728 Linux manual page \u4e2d\u4e5f\u6709\u63d0\u5230\uff1a"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["When a clone call is made ",(0,i.jsxs)(n.strong,{children:["without specifying ",(0,i.jsx)(n.code,{children:"CLONE_THREAD"})]}),", then the ",(0,i.jsx)(n.strong,{children:"resulting thread is placed in a new thread group"})," whose ",(0,i.jsx)(n.strong,{children:"TGID is the same as the thread's TID"}),". This thread is the leader of the new thread group."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u4ee5 CPU \u7576\u524d\u5728\u57f7\u884c\u7684 thread \u8207\u4ed6\u6240\u80fd\u5b58\u53d6\u7684\u8cc7\u6e90\u89d2\u5ea6 :"})}),"\n",(0,i.jsx)(n.p,{children:"Process \u8207 Thread \u5728 Linux \u4e2d\u6700\u5927\u7684\u5340\u5225\uff0c\u500b\u4eba\u8a8d\u70ba\u662f \u201c\u4f4d\u5740\u7a7a\u9593\u201d Process \u64c1\u6709\u7368\u7acb\u7684\u4f4d\u5740\u7a7a\u9593\u800c Thread \u5247\u8207\u5176\u5b83 Thraed \u5728\u540c\u4e00 Process \u7684\u4f4d\u5740\u7a7a\u9593\u4e4b\u4e0b\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u5c0d\u65bc CPU \u672c\u8eab\u800c\u8a00 :"})}),"\n",(0,i.jsx)(n.p,{children:"Process \u8207 Thraed \u7121\u7570\uff0c\u69cb\u6210 CPU \u57f7\u884c\u6d41\u7684\u5143\u7d20\u5011 (\u5982: register file \u8207 stack pointer \u7b49\u7b49) \u5c0d\u65bc\u5169\u8005\u4f86\u8aaa\u662f\u76f8\u540c\u610f\u7fa9\uff0c\u90fd\u662f\u900f\u904e\u8655\u7406\u5668\u4e2d\u7684 register file \u4e2d\u7684\u66ab\u5b58\u5668\u8868\u793a\u3002"}),"\n",(0,i.jsx)(n.h1,{id:"process-api",children:"Process API"}),"\n",(0,i.jsx)(n.p,{children:"\u9019\u88e1\u7c97\u7565\u6574\u7406 process \u7684 API \u5011\u3002"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"fork()"}),"\n",(0,i.jsx)(n.li,{children:"wait()"}),"\n",(0,i.jsx)(n.li,{children:"exec()"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fork()"})," \u8207 ",(0,i.jsx)(n.code,{children:"exec()"})," \u5728\u6211\u5011\u65e5\u5e38\u900f\u904e shell \u57f7\u884c\u7a0b\u5f0f\u4e2d\u6709\u8457\u5bc6\u4e0d\u53ef\u5206\u7684\u95dc\u4fc2\uff0c\u800c ",(0,i.jsx)(n.code,{children:"wait()"})," \u5247\u662f\u8207 process \u57f7\u884c\u5b8c\u5f8c\u7684\u8cc7\u6e90\u56de\u6536\u76f8\u95dc\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fork()"})," \u5728 Linux \u4e2d\u662f\u57fa\u65bc ",(0,i.jsx)(n.code,{children:"clone()"})," \u518d\u52a0\u4e0a\u7279\u5b9a\u53c3\u6578\u4f86\u5efa\u7acb\u65b0\u7684 Process\uff0c\u5728\u65b0\u7684 Process \u8a95\u751f\u5f8c\u57fa\u672c\u4e0a\u8207\u5efa\u7acb\u5b83\u7684 Process \u63a5\u8fd1\u76f8\u540c\uff0c\u901a\u5e38\u5efa\u7acb\u65b0\u7684 Process \u662f\u70ba\u4e86\u8981\u57f7\u884c\u67d0\u4e00\u500b Program \uff0c\u9019\u6642\u9700\u8981\u900f\u904e ",(0,i.jsx)(n.code,{children:"exec()"})," \u7cfb\u5217\u7684 system call \u5c07 Program \u8f09\u5165\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u5011\u5e73\u5e38\u5728 command line \u4e2d\u6240\u4f7f\u7528\u7684\u201c\u6307\u4ee4\u201d\u672c\u8eab\u5c31\u662f\u4e00\u500b\u57f7\u884c\u6a94(Program)\uff0cshell \u5728\u6211\u5011\u8f38\u5165\u6307\u4ee4\u5f8c fork \u51fa\u4e00\u500b\u65b0\u7684 Process \u518d\u642d\u914d exec \u5c07\u6307\u4ee4\u7684 Program \u8f09\u5165\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u81f3\u65bc wait() \u5247\u662f\u7576 Process \u7d50\u675f\u5f8c\u7528\u4f86\u5c07\u5269\u9918\u672a\u91cb\u653e\u7684\u8cc7\u6e90\uff0c\u50cf\u662f PCB(\u5728Linux\u4e2d\u70ba task_structure)\u91cb\u653e\u3002"}),"\n",(0,i.jsx)(n.h1,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://bottomupcs.com/index.html",children:(0,i.jsx)(n.strong,{children:"Computer Science from the Bottom Up"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://hackmd.io/@sysprog/linux-process#Linux-%E8%A8%AD%E8%A8%88%E7%9A%84-trade-off-%E5%92%8C-evolution",children:(0,i.jsx)(n.strong,{children:"\u4e0d\u50c5\u662f\u500b\u57f7\u884c\u55ae\u5143\u7684 Process"})})}),"\n",(0,i.jsx)(n.li,{children:"Understanding The Linux Kernel"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://pages.cs.wisc.edu/~remzi/OSTEP/cpu-intro.pdf",children:"The Abstraction: The Process"})}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const i={},c=r.createContext(i);function t(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);